<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <modelVersion>4.0.0</modelVersion>

  <groupId>se.kth</groupId>
  <artifactId>kth-parent</artifactId>
  <version>3.14.2-5</version>
  <packaging>pom</packaging>

  <name>Maven parent for KTH projects</name>

  <profiles>
    <profile>
      <id>ci</id>
      <properties>
        <!-- <spotbugs.threshold>low</spotbugs.threshold> -->
        <spotbugs.effort>max</spotbugs.effort>
      </properties>
    </profile>
  </profiles>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <downloadSources>true</downloadSources>
    <downloadJavadocs>true</downloadJavadocs>
    <java.version>11</java.version>
    <maven.version>(3.6.2,)</maven.version> <!-- Minimum version of maven 3.6.2 required for flatten plugin to work correctly -->
    <camel.version>3.14.2</camel.version>
    <spring-boot.version>2.6.7</spring-boot.version> <!-- Must be compatible with Camel version -->
    <azure.version>4.0.0</azure.version>
    <camel-ug.version>3.7.3-14</camel-ug.version>
    <camel-ladok3.version>3.56.2</camel-ladok3.version>
    <bunyan.version>2.7.0</bunyan.version>
    <lombok.version>1.18.24</lombok.version>
    <checkstyle.version>9.0.1</checkstyle.version>
    <spotbugs.version>4.6.0</spotbugs.version>
    <ladok-model.version>1.77.0</ladok-model.version>
    <maven.repository.id>integration</maven.repository.id>
    <maven.repository.url>https://pkgs.dev.azure.com/kth-integration/_packaging/integration/maven/v1</maven.repository.url>
    <sonar.host.url>https://integral-sqube.azurewebsites.net</sonar.host.url>
    <checkstyle.config.location>https://raw.githubusercontent.com/KTH/kth-java-settings/main/kth_checkstyle9.xml</checkstyle.config.location>

    <!--
      In camel-ladok3-test-utils there is a mismatch between the cxf-dependencies defined in camel, so we use this to import the correct CXF BOM.
      Must match the version in Camel BOM. Update this when updating camel.version.
    -->
    <cxf.version>3.4.4</cxf.version>

    <!--
      The UG Camel component must use version 4.x of Okhttp3, Spring Boot defines 3.x as default.
      When we start using a version of Spring boot with OkHttp 4.x predefined, this can be removed.
    -->
    <okhttp3.version>4.9.3</okhttp3.version>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>com.squareup.okhttp3</groupId>
        <artifactId>okhttp-bom</artifactId>
        <version>${okhttp3.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>org.apache.camel</groupId>
        <artifactId>camel-bom</artifactId>
        <version>${camel.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>org.apache.camel.springboot</groupId>
        <artifactId>camel-spring-boot-dependencies</artifactId>
        <version>${camel.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-dependencies</artifactId>
        <version>${spring-boot.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>org.apache.cxf</groupId>
        <artifactId>cxf-bom</artifactId>
        <version>${cxf.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>com.azure.spring</groupId>
        <artifactId>azure-spring-boot-bom</artifactId>
        <version>${azure.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>se.kth.infosys.logback</groupId>
        <artifactId>bunyan-layout</artifactId>
        <version>${bunyan.version}</version>
      </dependency>
      <dependency>
        <groupId>se.kth.infosys.log4j2</groupId>
        <artifactId>bunyan-layout</artifactId>
        <version>${bunyan.version}</version>
      </dependency>
      <dependency>
        <groupId>se.kth.infosys.smx</groupId>
        <artifactId>camel-ug-component</artifactId>
        <version>${camel-ug.version}</version>
      </dependency>
      <dependency>
        <groupId>se.kth.infosys.smx</groupId>
        <artifactId>camel-ug-test-tools</artifactId>
        <version>${camel-ug.version}</version>
      </dependency>
      <dependency>
        <groupId>se.kth.infosys.smx.ladok3</groupId>
        <artifactId>camel-ladok3-component</artifactId>
        <version>${camel-ladok3.version}</version>
      </dependency>
      <dependency>
        <groupId>se.kth.infosys.smx.ladok3</groupId>
        <artifactId>camel-ladok3-test-utils</artifactId>
        <version>${camel-ladok3.version}</version>
      </dependency>
      <dependency>
        <groupId>se.kth.it.ladok</groupId>
        <artifactId>ladok-api-model</artifactId>
        <version>${ladok-model.version}</version>
      </dependency>
      <dependency>
        <groupId>se.kth.it.ladok</groupId>
        <artifactId>ladok-event-model</artifactId>
        <version>${ladok-model.version}</version>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>

    <!-- Used to validate input for @PropertySource -->
    <dependency>
      <groupId>org.hibernate.validator</groupId>
      <artifactId>hibernate-validator</artifactId>
    </dependency>

    <!-- Annotation processor for generating Spring Boot configuration metadata (https://www.baeldung.com/spring-boot-configuration-metadata) -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-configuration-processor</artifactId>
      <optional>true</optional>
    </dependency>

    <!-- Annotation processor for lombok (https://projectlombok.org/) -->
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>${lombok.version}</version>
      <optional>true</optional>
    </dependency>

    <!-- Contains the @SuppressFBWarnings annotation fÃ¶r SpotBugs (https://spotbugs.github.io/) -->
    <dependency>
      <groupId>com.github.spotbugs</groupId>
      <artifactId>spotbugs-annotations</artifactId>
      <version>${spotbugs.version}</version>
      <optional>true</optional>
    </dependency>
  </dependencies>

  <build>
    <defaultGoal>clean verify</defaultGoal>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.1</version>
          <configuration>
            <parameters>true</parameters>
            <source>${java.version}</source>
            <target>${java.version}</target>
            <compilerArgs>
              <arg>-Xlint:all</arg>
            </compilerArgs>
          </configuration>
        </plugin>

        <!-- Junit test runner -->
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>3.0.0-M5</version>
        </plugin>

        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>3.0.0-M1</version>
        </plugin>

        <!-- Enforces that certain build parameters are used, such as java and maven version -->
        <plugin>
          <artifactId>maven-enforcer-plugin</artifactId>
          <version>3.0.0</version>
          <executions>
            <execution>
              <goals>
                <goal>enforce</goal>
              </goals>
              <configuration>
                <rules>
                  <requireMavenVersion>
                    <version>${maven.version}</version>
                  </requireMavenVersion>
                  <requireJavaVersion>
                    <version>${java.version}</version>
                  </requireJavaVersion>
                </rules>
              </configuration>
            </execution>
          </executions>
        </plugin>

        <!-- Code coverage analysis -->
        <plugin>
          <groupId>org.jacoco</groupId>
          <artifactId>jacoco-maven-plugin</artifactId>
          <version>0.8.8</version>
          <executions>
            <execution>
              <goals>
                <goal>prepare-agent</goal>
              </goals>
            </execution>
            <execution>
              <id>report</id>
              <phase>test</phase>
              <goals>
                <goal>report</goal>
              </goals>
            </execution>
          </executions>
        </plugin>

        <!-- Add Git-information to build, such as current git hash -->
        <plugin>
          <groupId>io.github.git-commit-id</groupId>
          <artifactId>git-commit-id-maven-plugin</artifactId>
          <version>5.0.0</version>
          <executions>
            <execution>
              <id>get-the-git-infos</id>
              <goals>
                <goal>revision</goal>
              </goals>
              <phase>initialize</phase>
            </execution>
          </executions>
          <configuration>
            <generateGitPropertiesFile>true</generateGitPropertiesFile>
            <excludeProperties>
              <excludeProperty>git.commit.user.email</excludeProperty>
              <excludeProperty>git.build.user.email</excludeProperty>
            </excludeProperties>
          </configuration>
        </plugin>

        <!-- Handle versions -->
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>versions-maven-plugin</artifactId>
          <version>2.10.0</version>
          <configuration>
            <generateBackupPoms>false</generateBackupPoms>
          </configuration>
        </plugin>

        <!-- Generate a sources jar which can be downloaded -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-source-plugin</artifactId>
          <version>3.2.1</version>
          <executions>
            <execution>
              <id>attach-sources</id>
              <goals>
                <goal>jar</goal>
              </goals>
            </execution>
          </executions>
        </plugin>

        <!-- Generate a javadoc jar which can be downloaded -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-javadoc-plugin</artifactId>
          <version>3.3.1</version>
          <executions>
            <execution>
              <id>attach-javadocs</id>
              <goals>
                <goal>jar</goal>
              </goals>
              <configuration>
                <quiet>true</quiet>
              </configuration>
            </execution>
          </executions>
          <configuration>
            <quiet>true</quiet>
          </configuration>
        </plugin>

        <!-- Static code analysis -->
        <plugin>
          <groupId>com.github.spotbugs</groupId>
          <artifactId>spotbugs-maven-plugin</artifactId>
          <version>${spotbugs.version}.0</version>
          <executions>
            <execution>
              <phase>prepare-package</phase>
              <goals>
                <goal>check</goal>
              </goals>
            </execution>
          </executions>
          <configuration>
            <effort>min</effort>
            <threshold>medium</threshold>
            <xmlOutput>true</xmlOutput>
            <omitVisitors>FindReturnRef</omitVisitors>
            <failOnError>true</failOnError>
          </configuration>
        </plugin>

        <!-- Code style guide checker -->
        <plugin>
          <artifactId>maven-checkstyle-plugin</artifactId>
          <version>3.1.2</version>
          <dependencies>
            <dependency>
              <groupId>com.puppycrawl.tools</groupId>
              <artifactId>checkstyle</artifactId>
              <version>${checkstyle.version}</version>
            </dependency>
          </dependencies>
          <executions>
            <execution>
              <id>validate</id>
              <phase>process-test-classes</phase>
              <goals>
                <goal>check</goal>
              </goals>
            </execution>
          </executions>
          <configuration>
            <encoding>UTF-8</encoding>
            <violationSeverity>warning</violationSeverity>
            <failOnViolation>true</failOnViolation>
            <includeTestSourceDirectory>true</includeTestSourceDirectory>
            <linkXRef>false</linkXRef>
          </configuration>
        </plugin>

        <!-- Checks that docker.conf contains the same version as the pom.xml -->
        <plugin>
          <groupId>se.kth</groupId>
          <artifactId>dockerconf-maven-plugin</artifactId>
          <version>1.1.2</version>
          <executions>
            <execution>
              <phase>process-sources</phase>
              <goals>
                <goal>validate</goal>
              </goals>
            </execution>
          </executions>
        </plugin>

        <plugin>
          <groupId>org.apache.camel</groupId>
          <artifactId>camel-maven-plugin</artifactId>
          <version>${camel.version}</version>
        </plugin>

        <plugin>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-maven-plugin</artifactId>
          <version>${spring-boot.version}</version>
          <executions>
            <execution>
              <goals>
                <goal>repackage</goal>
              </goals>
            </execution>
          </executions>
          <configuration>
            <!--
              The Spring Boot repackaging goal always includes every dependency,
              even those marked as optional or with Scope=provided. The
              annotation processors are only used during compilation,
              never at runtime, so we don't need them in the repackaged jar.
            -->
            <excludes>
              <exclude>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-configuration-processor</artifactId>
              </exclude>
              <exclude>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
              </exclude>
              <exclude>
                <groupId>com.github.spotbugs</groupId>
                <artifactId>spotbugs-annotations</artifactId>
              </exclude>
            </excludes>
          </configuration>
        </plugin>

        <!-- Use this plugin in your project if you use the ${revision} property -->
        <!-- to define version number. https://maven.apache.org/maven-ci-friendly.html -->
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>flatten-maven-plugin</artifactId>
          <version>1.2.7</version>
          <configuration>
            <updatePomFile>true</updatePomFile>
            <flattenMode>resolveCiFriendliesOnly</flattenMode>
            <!-- Minimum of maven 3.6.2 required for this to work correctly -->
            <outputDirectory>${project.build.directory}</outputDirectory>
            <flattenedPomFilename>${project.artifactId}-${project.version}.pom</flattenedPomFilename>
          </configuration>
          <executions>
            <execution>
              <id>flatten</id>
              <phase>process-resources</phase>
              <goals>
                <goal>flatten</goal>
              </goals>
            </execution>
            <execution>
              <id>flatten.clean</id>
              <phase>clean</phase>
              <goals>
                <goal>clean</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>

  <distributionManagement>
    <repository>
      <id>${maven.repository.id}</id>
      <url>${maven.repository.url}</url>
    </repository>
    <snapshotRepository>
      <id>${maven.repository.id}</id>
      <url>${maven.repository.url}</url>
    </snapshotRepository>
  </distributionManagement>

  <pluginRepositories>
    <pluginRepository>
      <id>${maven.repository.id}</id>
      <url>${maven.repository.url}</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </pluginRepository>
  </pluginRepositories>

  <!-- This must be copied to your project, otherwise kth-parent will not be found.
       The properties cannot be used, they must be hardcoded here. -->
  <repositories>
    <repository>
      <id>${maven.repository.id}</id>
      <url>${maven.repository.url}</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </repository>
  </repositories>
</project>
